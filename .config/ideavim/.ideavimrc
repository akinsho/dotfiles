set number
set relativenumber
set visualbell
set clipboard+=unnamed
set scrolloff=10
set ignorecase
set smartcase
set incsearch
set hlsearch
set wrapscan
set notimeout
" set timeoutlen=5000

" Leader key
let mapleader = ','
let maplocalleader = '<space>'

"==========================
" Plugins need to install "
"==========================
" - [x] ideavim
" - [x] String Manipulation
" - [x] Which-Key

" Plugins
set surround
set multiple-cursors
set which-key
set highlightedyank
set easymotion
set nerdtree
set commentary
set argtextobj
set exchange

let g:WhichKey_FontSize = 15
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_ShowVimActions = "false"
let g:WhichKey_SortOrder = "by_key_prefix_first"

nmap <S-C-n> <Plug>NextWholeOccurrence
xmap <S-C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
nmap <C-q> <Plug>SkipOccurrence
xmap <C-q> <plug>SkipOccurrence
nmap <C-x> <Plug>RemoveOccurrence
xmap <C-x> <Plug>RemoveOccurrence

" IDEAVIM config options
set ideajoin

" Mappings
sethandler <c-j> a:vim
sethandler <c-k> a:vim

inoremap jk <Esc>
nmap Q <nop>
nnoremap <Leader><Tab> :tabnext<CR>
nnoremap <S-Tab> :tabprev<CR>\
nnoremap [<Space> :<CR>mzo<Esc>`z:<CR>
nnoremap ]<Space> :<CR>mzO<Esc>`z:<CR>
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
nnoremap Y y$
nnoremap n nzz
nnoremap N Nzz
xnoremap < <gv
xnoremap > >gv

" Switch between alternate buffers
nnoremap <leader><leader> :b#<CR>
nmap <leader>sv <Action>(IdeaVim.ReloadVimRc.reload)
nnoremap <leader>ev :e ~/.ideavimrc<CR>
nnoremap <space>l    :nohlsearch<CR>

" Distraction Free Mode
nmap <c-z> <Action>(ToggleDistractionFreeMode)

" {{{ String manipulation
" Plugin: String Manipulation
" Settigns: Do not add selection
map crc <Action>(StringManipulation.ToCamelCase)
map crp <Action>(StringManipulation.ToPascalCase)
map crk <Action>(StringManipulation.ToKebabCase)
map crs <Action>(StringManipulation.ToSnakeCase)
map crS <Action>(StringManipulation.ToCapitalizedSnakeCase)
" }}}

" {{{ Git
map <space>gg <Action>(VcsGroups)
map <space>gl <Action>(Git.Pull)
map <space>gp <Action>(Vcs.Push)
map <space>gb <Action>(Git.Branches)
map <space>gc <Action>(CheckinProject)
map <space>gs <Action>(Git.Stash)
" }}}

" Terminal
nmap <c-\> <Action>(ActivateTerminalToolWindow)
nmap <leader>t <Action>(Terminal.OpenInTerminal)

" Jump around with easymotion
nmap s <Plug>(easymotion-s)

nmap <CR> <Action>(Tree-selectNextExtendSelection)
nmap <S-CR> <Action>(Tree-selectPrevExtendSelection)

" Folding
nmap <leader>zc <Action>(CollapseAllRegions)
nmap <leader>zo <Action>(ExpandAllRegions)

" Actions
nmap <c-p> <Action>(GotoAction)
nmap <Leader>q <Action>(CloseContent)
nmap <Leader>qa <Action>(CloseAllEditors)
nmap <leader>ff <Action>(GotoFile)
nmap <leader>fo <Action>(RecentFiles)
nmap <leader>fs <Action>(TextSearchAction)
nmap <leader>fp <Action>(FindInPath)
nmap <leader>A <Action>(GotoTest)
nmap <leader>mv <Action>(Move)
xmap <leader>mv <Action>(Move)
nmap gr <Action>(FindUsages)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(QuickImplementations)
nmap gp <Action>(QuickImplementations)
nmap gy <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap <leader>oi <Action>(OptimizeImports)
nmap <leader>rn <Action>(RenameElement)
nmap <leader>rf <Action>(ReformatCode)
nmap <leader>ca <Action>(Refactorings.QuickListPopupAction)
nmap <leader>a  <Action>(ShowIntentionActions)
xmap <leader>a  <Action>(ShowIntentionActions)
nmap gS   <Action>(EditorSplitLine)
nmap gJ   <Action>(EditorJoinLines)
nmap [d <Action>(GotoNextError)
nmap ]d <Action>(GotoPreviousError)
nmap <c-z> <Action>(ToggleDistractionFreeMode)
nmap gh <Action>(ShowErrorDescription)
nmap <M-p> <Action>(JumpToLastWindow)
nmap <c-w>o <Action>(HideAllWindows)
nmap <c-\> <Action>(HideAllWindows)
nmap S <Action>(SurroundWith)
map  <C-s>      <Action>(SaveAll)
imap <C-s>      <Action>(SaveAll)
nmap <leader>s  <Action>(SaveAll)
nmap K  <Action>(ShowHoverInfo)
nmap <Leader>A <Action>(GotoTest)
map  <A-j> <Action>(MoveLineDown)
imap <A-j> <Action>(MoveLineDown)
map  <A-k> <Action>(MoveLineUp)
imap <A-k> <Action>(MoveLineUp)
" built-in navigation to navigated items works better
nmap <c-o> <Action>(Back)
nmap <c-i> <Action>(Forward)
nmap <c-=> <Action>Unsplit<CR>
"-------------------------------------------------------------
" Android Studio Specific
"-------------------------------------------------------------
if &ide =~? 'Android Studio'
    nmap <space>te <Action>(ActivateAndroidEmulatorToolWindow)
    nmap <leader>rr <Action>(Android.Designer.ForceRefreshPreview)
    let g:WhichKeyDesc_tools = "<Space>t Tools"
    let g:WhichKeyDesc_tools_emulator = "<Space>te Emulator"
endif
"-------------------------------------------------------------

" but preserve ideavim defaults
nmap g<c-o> <c-o>
nmap g<c-i> <c-i>

" File Explorer
nmap <C-N> :NERDTreeToggle<CR>
let g:NERDTreeMapQuit = '<C-N>'

" Git
nmap <space>gc <Action>(ActivateCommitToolWindow)
nmap <space>gs <Action>(ActivateVersionControlToolWindow)
nmap <space>gb <Action>(Git.Branches)
nmap [h <Action>(VcsShowNextChangeMarker)
nmap ]h <Action>(VcsShowPrevChangeMarker)
map <leader>hr  <Action>(Vcs.RollbackChangedLines)
map <leader>hb  <Action>(GitToolBox.BlameDetails)

" WhichKey configuration
let g:WhichKey_FontSize = 15
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_ShowVimActions = "false"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_DefaultDelay = 600

" Leader prefix menu
let g:WhichKeyDesc_leader = "<leader> Leader menu"

" Leader mappings
let g:WhichKeyDesc_alternate_file = "<leader><leader> Alternate file"
let g:WhichKeyDesc_tab_next = "<leader><Tab> Next tab"
let g:WhichKeyDesc_quit = "<leader>q Close content"
let g:WhichKeyDesc_quit_all = "<leader>qa Close all editors"
let g:WhichKeyDesc_save_all = "<leader>s Save all"
let g:WhichKeyDesc_source_vimrc = "<leader>sv Source vimrc"
let g:WhichKeyDesc_edit_vimrc = "<leader>ev Edit vimrc"
let g:WhichKeyDesc_test = "<leader>A Go to test file"

" Find/Search submenu
let g:WhichKeyDesc_find = "<leader>f Find menu"
let g:WhichKeyDesc_find_go_to_file = "<leader>ff Go to file"
let g:WhichKeyDesc_find_recent = "<leader>fo Recent files"
let g:WhichKeyDesc_find_search = "<leader>fs Text search"
let g:WhichKeyDesc_find_in_path = "<leader>fp Find in path"

" Code mappings
let g:WhichKeyDesc_optimize_imports = "<leader>oi Optimize imports"

" Refactor submenu
let g:WhichKeyDesc_refactors = "<leader>r Refactors menu"
let g:WhichKeyDesc_refactors_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactors_reformat_code = "<leader>rf Reformat code"

" Actions
let g:WhichKeyDesc_actions = "<leader>a Show intentions"
let g:WhichKeyDesc_code_actions = "<leader>ca Code actions"
let g:WhichKeyDesc_terminal = "<leader>t Open terminal"

" Move mapping
let g:WhichKeyDesc_move = "<leader>mv Move"

" Folding submenu
let g:WhichKeyDesc_fold = "<leader>z Folding menu"
let g:WhichKeyDesc_fold_collapse = "<leader>zc Collapse all regions"
let g:WhichKeyDesc_fold_expand = "<leader>zo Expand all regions"

" Space prefix menu
let g:WhichKeyDesc_space = "<Space> Space menu"

" Space key mappings
let g:WhichKeyDesc_redraw = "<Space>l Clear search highlights"

" Git submenu
let g:WhichKeyDesc_git = "<Space>g Git menu"
let g:WhichKeyDesc_git_groups = "<Space>gg VCS groups"
let g:WhichKeyDesc_git_pull = "<Space>gl Git pull"
let g:WhichKeyDesc_git_push = "<Space>gp Git push"
let g:WhichKeyDesc_git_branches = "<Space>gb Git branches"
let g:WhichKeyDesc_git_commit = "<Space>gc Git commit"
let g:WhichKeyDesc_git_status = "<Space>gs Git status/stash"

" Git history submenu (leader based)
let g:WhichKeyDesc_git_history = "<leader>h Git history menu"
let g:WhichKeyDesc_git_rollback = "<leader>hr Rollback lines"
let g:WhichKeyDesc_git_blame = "<leader>hb Git blame"

" Tools submenu
let g:WhichKeyDesc_tools = "<Space>t Tools menu"
let g:WhichKeyDesc_tools_emulator = "<Space>te Emulator"

" g prefix menu (only for sequential keypresses)
let g:WhichKeyDesc_go = "g Go to menu"
let g:WhichKeyDesc_go_declaration = "gd Go to declaration"
let g:WhichKeyDesc_go_implementation = "gi Go to implementation"
let g:WhichKeyDesc_go_type = "gy Go to type"
let g:WhichKeyDesc_go_quick_impl = "gD Quick implementations"
let g:WhichKeyDesc_go_preview = "gp Quick preview"
let g:WhichKeyDesc_go_usages = "gr Find usages"
let g:WhichKeyDesc_go_split = "gS Split line"
let g:WhichKeyDesc_go_join = "gJ Join lines"